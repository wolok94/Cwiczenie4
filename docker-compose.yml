services:
  frontend:
    build:
      context: ./Cwiczenie4_KamilWolak.UI  # Ustawiamy kontekst na folder UI, gdzie znajduje się Dockerfile
      dockerfile: ./Cwiczenie4_KamilWolak.UI/Dockerfile  # Plik Dockerfile w katalogu kontekstowym
    ports:
      - "4200:80"
    depends_on:
      - backend  # Usunięcie condition, uruchomi się po backendzie, ale nie sprawdzi jego gotowości
    networks:
      - app-network

  backend:
    build:
      context: ./  # Katalog nadrzędny, w którym znajduje się Dockerfile
      dockerfile: Dockerfile.backend  # Określamy nazwę Dockerfile (jeśli różni się od domyślnej)
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=test123
      - DB_NAME=Currencies
    ports:
      - "5000:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  postgres:
    image: postgres:16
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=test123
      - POSTGRES_DB=Currencies
    ports:
      - "5432:5432"
    networks:
      - app-network
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
